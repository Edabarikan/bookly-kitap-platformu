// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Data;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(KitapDBContext))]
    partial class KitapDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "c2212fae-c136-472f-afc1-a060f6573084",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "6309a9ee-3754-471c-8e25-06d41fd0bf48",
                            Name = "Uye",
                            NormalizedName = "UYE"
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Soyad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Ad = "Super",
                            Adres = "Turkiye",
                            ConcurrencyStamp = "f7ff238f-6ed4-45bf-89d7-9e731c95caf2",
                            Email = "super@deneme.com",
                            EmailConfirmed = true,
                            FullName = "Super User",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPER@DENEME.COM",
                            NormalizedUserName = "SUPERUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEE1jFcQaH4pKsHvqIf4JJhYFRNuxP3VWX4T4TcvMh2NyFcXoeWS3SzzgA+hH2wlqJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e92d0441-08e0-446e-a6c2-2436bf8b6994",
                            Soyad = "User",
                            TwoFactorEnabled = false,
                            UserName = "superUser"
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Kategori", b =>
                {
                    b.Property<int>("KategoriID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KategoriID"));

                    b.Property<string>("KategoriAdi")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.HasKey("KategoriID");

                    b.ToTable("Kategoriler");

                    b.HasData(
                        new
                        {
                            KategoriID = 1,
                            KategoriAdi = "Roman"
                        },
                        new
                        {
                            KategoriID = 2,
                            KategoriAdi = "Şiir"
                        },
                        new
                        {
                            KategoriID = 3,
                            KategoriAdi = "Deneme"
                        },
                        new
                        {
                            KategoriID = 4,
                            KategoriAdi = "Hikaye"
                        },
                        new
                        {
                            KategoriID = 5,
                            KategoriAdi = "Biyografi"
                        },
                        new
                        {
                            KategoriID = 6,
                            KategoriAdi = "Tarih"
                        },
                        new
                        {
                            KategoriID = 7,
                            KategoriAdi = "Felsefe"
                        },
                        new
                        {
                            KategoriID = 8,
                            KategoriAdi = "Bilimkurgu"
                        },
                        new
                        {
                            KategoriID = 9,
                            KategoriAdi = "Klasik"
                        },
                        new
                        {
                            KategoriID = 10,
                            KategoriAdi = "Psikoloji"
                        },
                        new
                        {
                            KategoriID = 11,
                            KategoriAdi = "Çocuk Kitapları"
                        },
                        new
                        {
                            KategoriID = 12,
                            KategoriAdi = "Kişisel Gelişim"
                        },
                        new
                        {
                            KategoriID = 13,
                            KategoriAdi = "Politika"
                        },
                        new
                        {
                            KategoriID = 14,
                            KategoriAdi = "Edebiyat Kuramı"
                        },
                        new
                        {
                            KategoriID = 15,
                            KategoriAdi = "Sosyoloji"
                        },
                        new
                        {
                            KategoriID = 16,
                            KategoriAdi = "Mizah"
                        },
                        new
                        {
                            KategoriID = 17,
                            KategoriAdi = "Savaş"
                        },
                        new
                        {
                            KategoriID = 18,
                            KategoriAdi = "Fantastik"
                        },
                        new
                        {
                            KategoriID = 19,
                            KategoriAdi = "Macera"
                        },
                        new
                        {
                            KategoriID = 20,
                            KategoriAdi = "Aşk"
                        },
                        new
                        {
                            KategoriID = 21,
                            KategoriAdi = "Edebiyat Tarihi"
                        },
                        new
                        {
                            KategoriID = 22,
                            KategoriAdi = "Gerilim"
                        },
                        new
                        {
                            KategoriID = 23,
                            KategoriAdi = "Sanat"
                        },
                        new
                        {
                            KategoriID = 24,
                            KategoriAdi = "Eğitim"
                        },
                        new
                        {
                            KategoriID = 25,
                            KategoriAdi = "Korku"
                        },
                        new
                        {
                            KategoriID = 26,
                            KategoriAdi = "Siyasi Edebiyat"
                        },
                        new
                        {
                            KategoriID = 27,
                            KategoriAdi = "Mistik"
                        },
                        new
                        {
                            KategoriID = 28,
                            KategoriAdi = "Ekonomi"
                        },
                        new
                        {
                            KategoriID = 29,
                            KategoriAdi = "Biyoloji"
                        },
                        new
                        {
                            KategoriID = 30,
                            KategoriAdi = "Mühendislik"
                        },
                        new
                        {
                            KategoriID = 31,
                            KategoriAdi = "Tıp"
                        },
                        new
                        {
                            KategoriID = 32,
                            KategoriAdi = "Felsefi Roman"
                        },
                        new
                        {
                            KategoriID = 33,
                            KategoriAdi = "Kültürel Çalışmalar"
                        },
                        new
                        {
                            KategoriID = 34,
                            KategoriAdi = "Gezi"
                        },
                        new
                        {
                            KategoriID = 35,
                            KategoriAdi = "Edebiyat Eleştirisi"
                        },
                        new
                        {
                            KategoriID = 36,
                            KategoriAdi = "Arkeoloji"
                        },
                        new
                        {
                            KategoriID = 37,
                            KategoriAdi = "Doğa"
                        },
                        new
                        {
                            KategoriID = 38,
                            KategoriAdi = "Efsane"
                        },
                        new
                        {
                            KategoriID = 39,
                            KategoriAdi = "Zaman Yolculuğu"
                        },
                        new
                        {
                            KategoriID = 40,
                            KategoriAdi = "Kişisel Anlatı"
                        },
                        new
                        {
                            KategoriID = 41,
                            KategoriAdi = "Bilinçli Farkındalık"
                        },
                        new
                        {
                            KategoriID = 42,
                            KategoriAdi = "Felsefi Deneme"
                        },
                        new
                        {
                            KategoriID = 43,
                            KategoriAdi = "Din"
                        },
                        new
                        {
                            KategoriID = 44,
                            KategoriAdi = "Çevre"
                        },
                        new
                        {
                            KategoriID = 45,
                            KategoriAdi = "Sosyal Medya"
                        },
                        new
                        {
                            KategoriID = 46,
                            KategoriAdi = "Müzik"
                        },
                        new
                        {
                            KategoriID = 47,
                            KategoriAdi = "Edebiyat Teorisi"
                        },
                        new
                        {
                            KategoriID = 48,
                            KategoriAdi = "Karmaşık Sistemler"
                        },
                        new
                        {
                            KategoriID = 49,
                            KategoriAdi = "Savaş Hikayesi"
                        },
                        new
                        {
                            KategoriID = 50,
                            KategoriAdi = "Politik Psikoloji"
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Kitap", b =>
                {
                    b.Property<int>("KitapID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KitapID"));

                    b.Property<string>("Aciklama")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("varchar");

                    b.Property<int?>("AppUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EklenmeTarihi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<decimal>("Fiyat")
                        .HasColumnType("money");

                    b.Property<string>("KapakResmi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<int>("KategoriID")
                        .HasColumnType("int");

                    b.Property<string>("KitapAdi")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar");

                    b.Property<int>("YayineviID")
                        .HasColumnType("int");

                    b.Property<int>("YazarID")
                        .HasColumnType("int");

                    b.HasKey("KitapID");

                    b.HasIndex("AppUserID");

                    b.HasIndex("KategoriID");

                    b.HasIndex("YazarID");

                    b.ToTable("Kitaplar");

                    b.HasData(
                        new
                        {
                            KitapID = 1,
                            Aciklama = "Yaşar Kemal’in eşsiz anlatımıyla köy hayatını ve eşkıya İnce Memed’in destansı hikayesini anlatır.",
                            AppUserID = 1,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 120.5m,
                            KapakResmi = "ince-memed.jpg",
                            KategoriID = 1,
                            KitapAdi = "İnce Memed",
                            YayineviID = 1,
                            YazarID = 3
                        },
                        new
                        {
                            KitapID = 2,
                            Aciklama = "Tolstoy’un başyapıtı, Napolyon savaşları sırasında Rus aristokrasisinin hayatını ve içsel savaşlarını anlatır.",
                            AppUserID = 1,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 150.75m,
                            KapakResmi = "savas-ve-barish.jpg",
                            KategoriID = 1,
                            KitapAdi = "Savaş ve Barış",
                            YayineviID = 2,
                            YazarID = 1
                        },
                        new
                        {
                            KitapID = 3,
                            Aciklama = "Dostoyevski’nin en bilinen romanlarından biri, bir cinayeti ve suçlulukla yüzleşen bir adamın psikolojik derinliğini keşfeder.",
                            AppUserID = 1,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 95m,
                            KapakResmi = "suc-ve-ceza.jpg",
                            KategoriID = 1,
                            KitapAdi = "Suç ve Ceza",
                            YayineviID = 3,
                            YazarID = 2
                        },
                        new
                        {
                            KitapID = 4,
                            Aciklama = "Saint-Exupéry’nin çocuklar ve yetişkinler için derin anlamlar içeren masalı, evrenin sadeliği ve insanlık üzerine düşündürür.",
                            AppUserID = 1,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 60.5m,
                            KapakResmi = "kucuk-prens.jpg",
                            KategoriID = 1,
                            KitapAdi = "Küçük Prens",
                            YayineviID = 4,
                            YazarID = 4
                        },
                        new
                        {
                            KitapID = 5,
                            Aciklama = "Stefan Zweig'in, insanın ruhsal çöküşünü detaylı bir şekilde ele aldığı etkileyici bir roman.",
                            AppUserID = 1,
                            EklenmeTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fiyat = 85m,
                            KapakResmi = "bir-cokusun-hikayesi.jpg",
                            KategoriID = 1,
                            KitapAdi = "Bir Çöküşün Hikayesi",
                            YayineviID = 5,
                            YazarID = 5
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.KitapYayinevi", b =>
                {
                    b.Property<int>("KitapYayineviID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KitapYayineviID"));

                    b.Property<int>("KitapID")
                        .HasColumnType("int");

                    b.Property<int>("YayineviID")
                        .HasColumnType("int");

                    b.HasKey("KitapYayineviID");

                    b.HasIndex("KitapID");

                    b.HasIndex("YayineviID");

                    b.ToTable("KitaplarYayinevleri");
                });

            modelBuilder.Entity("WebApplication1.Models.Yayinevi", b =>
                {
                    b.Property<int>("YayineviID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("YayineviID"));

                    b.Property<string>("YayineviAdi")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.HasKey("YayineviID");

                    b.ToTable("Yayinevleri");

                    b.HasData(
                        new
                        {
                            YayineviID = 1,
                            YayineviAdi = "Can Yayınları"
                        },
                        new
                        {
                            YayineviID = 2,
                            YayineviAdi = "Yapı Kredi Yayınları"
                        },
                        new
                        {
                            YayineviID = 3,
                            YayineviAdi = "İş Bankası Kültür Yayınları"
                        },
                        new
                        {
                            YayineviID = 4,
                            YayineviAdi = "Everest Yayınları"
                        },
                        new
                        {
                            YayineviID = 5,
                            YayineviAdi = "Doğan Kitap"
                        },
                        new
                        {
                            YayineviID = 6,
                            YayineviAdi = "Remzi Kitabevi"
                        },
                        new
                        {
                            YayineviID = 7,
                            YayineviAdi = "Timaş Yayınları"
                        },
                        new
                        {
                            YayineviID = 8,
                            YayineviAdi = "Altın Kitaplar"
                        },
                        new
                        {
                            YayineviID = 9,
                            YayineviAdi = "Ketebe Yayınları"
                        },
                        new
                        {
                            YayineviID = 10,
                            YayineviAdi = "Epsilon Yayınları"
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Yazar", b =>
                {
                    b.Property<int>("YazarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("YazarID"));

                    b.Property<string>("YazarAd")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<string>("YazarSoyad")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.HasKey("YazarID");

                    b.ToTable("Yazarlar");

                    b.HasData(
                        new
                        {
                            YazarID = 1,
                            YazarAd = "Mustafa Kemal",
                            YazarSoyad = "Atatürk"
                        },
                        new
                        {
                            YazarID = 2,
                            YazarAd = "Lev",
                            YazarSoyad = "Nikolayeviç Tolstoy"
                        },
                        new
                        {
                            YazarID = 3,
                            YazarAd = "Fyodor",
                            YazarSoyad = "Dostoyevski"
                        },
                        new
                        {
                            YazarID = 4,
                            YazarAd = "Mikhail",
                            YazarSoyad = "Bulgakov"
                        },
                        new
                        {
                            YazarID = 5,
                            YazarAd = "Anton",
                            YazarSoyad = "Çehov"
                        },
                        new
                        {
                            YazarID = 6,
                            YazarAd = "Selim",
                            YazarSoyad = "İleri"
                        },
                        new
                        {
                            YazarID = 7,
                            YazarAd = "Orhan",
                            YazarSoyad = "Pamuk"
                        },
                        new
                        {
                            YazarID = 8,
                            YazarAd = "George",
                            YazarSoyad = "Orwell"
                        },
                        new
                        {
                            YazarID = 9,
                            YazarAd = "Haruki",
                            YazarSoyad = "Murakami"
                        },
                        new
                        {
                            YazarID = 10,
                            YazarAd = "Jane",
                            YazarSoyad = "Austen"
                        },
                        new
                        {
                            YazarID = 11,
                            YazarAd = "Ahmet",
                            YazarSoyad = "Hamdi Tanpınar"
                        },
                        new
                        {
                            YazarID = 12,
                            YazarAd = "Mark",
                            YazarSoyad = "Twain"
                        },
                        new
                        {
                            YazarID = 13,
                            YazarAd = "Ernest",
                            YazarSoyad = "Hemingway"
                        },
                        new
                        {
                            YazarID = 14,
                            YazarAd = "F. Scott",
                            YazarSoyad = "Fitzgerald"
                        },
                        new
                        {
                            YazarID = 15,
                            YazarAd = "Çetin",
                            YazarSoyad = "Altan"
                        },
                        new
                        {
                            YazarID = 16,
                            YazarAd = "J.K.",
                            YazarSoyad = "Rowling"
                        },
                        new
                        {
                            YazarID = 17,
                            YazarAd = "John",
                            YazarSoyad = "Steinbeck"
                        },
                        new
                        {
                            YazarID = 18,
                            YazarAd = "Oscar",
                            YazarSoyad = "Wilde"
                        },
                        new
                        {
                            YazarID = 19,
                            YazarAd = "Gabriel",
                            YazarSoyad = "García Márquez"
                        },
                        new
                        {
                            YazarID = 20,
                            YazarAd = "Bülent",
                            YazarSoyad = "Ecevit"
                        },
                        new
                        {
                            YazarID = 21,
                            YazarAd = "Ahmet",
                            YazarSoyad = "Arpad"
                        },
                        new
                        {
                            YazarID = 22,
                            YazarAd = "J.R.R.",
                            YazarSoyad = "Tolkien"
                        },
                        new
                        {
                            YazarID = 23,
                            YazarAd = "Margaret",
                            YazarSoyad = "Atwood"
                        },
                        new
                        {
                            YazarID = 24,
                            YazarAd = "Neil",
                            YazarSoyad = "Gaiman"
                        },
                        new
                        {
                            YazarID = 25,
                            YazarAd = "Nisan",
                            YazarSoyad = "Tuncer"
                        },
                        new
                        {
                            YazarID = 26,
                            YazarAd = "Toni",
                            YazarSoyad = "Morrison"
                        },
                        new
                        {
                            YazarID = 27,
                            YazarAd = "Ray",
                            YazarSoyad = "Bradbury"
                        },
                        new
                        {
                            YazarID = 28,
                            YazarAd = "Tariq",
                            YazarSoyad = "Ali"
                        },
                        new
                        {
                            YazarID = 29,
                            YazarAd = "Herman",
                            YazarSoyad = "Melville"
                        },
                        new
                        {
                            YazarID = 30,
                            YazarAd = "Isaac",
                            YazarSoyad = "Asimov"
                        },
                        new
                        {
                            YazarID = 31,
                            YazarAd = "Dante",
                            YazarSoyad = "Alighieri"
                        },
                        new
                        {
                            YazarID = 32,
                            YazarAd = "Johann Wolfgang",
                            YazarSoyad = "Goethe"
                        },
                        new
                        {
                            YazarID = 33,
                            YazarAd = "Albert",
                            YazarSoyad = "Camus"
                        },
                        new
                        {
                            YazarID = 34,
                            YazarAd = "Süleyman",
                            YazarSoyad = "Nazif"
                        },
                        new
                        {
                            YazarID = 35,
                            YazarAd = "Franz",
                            YazarSoyad = "Kafka"
                        },
                        new
                        {
                            YazarID = 36,
                            YazarAd = "H.G.",
                            YazarSoyad = "Wells"
                        },
                        new
                        {
                            YazarID = 37,
                            YazarAd = "Aldous",
                            YazarSoyad = "Huxley"
                        },
                        new
                        {
                            YazarID = 38,
                            YazarAd = "William",
                            YazarSoyad = "Golding"
                        },
                        new
                        {
                            YazarID = 39,
                            YazarAd = "T.S.",
                            YazarSoyad = "Eliot"
                        },
                        new
                        {
                            YazarID = 40,
                            YazarAd = "Turgut",
                            YazarSoyad = "Özakman"
                        },
                        new
                        {
                            YazarID = 41,
                            YazarAd = "Mehmet",
                            YazarSoyad = "Akif Ersoy"
                        },
                        new
                        {
                            YazarID = 42,
                            YazarAd = "Philip",
                            YazarSoyad = "K. Dick"
                        },
                        new
                        {
                            YazarID = 43,
                            YazarAd = "Jules",
                            YazarSoyad = "Verne"
                        },
                        new
                        {
                            YazarID = 44,
                            YazarAd = "Arthur",
                            YazarSoyad = "C. Clarke"
                        },
                        new
                        {
                            YazarID = 45,
                            YazarAd = "Douglas",
                            YazarSoyad = "Adams"
                        },
                        new
                        {
                            YazarID = 46,
                            YazarAd = "Stephen",
                            YazarSoyad = "King"
                        },
                        new
                        {
                            YazarID = 47,
                            YazarAd = "C.S.",
                            YazarSoyad = "Lewis"
                        },
                        new
                        {
                            YazarID = 48,
                            YazarAd = "George",
                            YazarSoyad = "Eliot"
                        },
                        new
                        {
                            YazarID = 49,
                            YazarAd = "John",
                            YazarSoyad = "Milton"
                        },
                        new
                        {
                            YazarID = 50,
                            YazarAd = "Murat",
                            YazarSoyad = "Mungan"
                        },
                        new
                        {
                            YazarID = 51,
                            YazarAd = "Ahmet",
                            YazarSoyad = "Ümit"
                        },
                        new
                        {
                            YazarID = 52,
                            YazarAd = "Zadie",
                            YazarSoyad = "Smith"
                        },
                        new
                        {
                            YazarID = 53,
                            YazarAd = "Tess",
                            YazarSoyad = "Gerritsen"
                        },
                        new
                        {
                            YazarID = 54,
                            YazarAd = "Orhan",
                            YazarSoyad = "Veli Kanık"
                        },
                        new
                        {
                            YazarID = 55,
                            YazarAd = "Mehmet",
                            YazarSoyad = "Erdem"
                        },
                        new
                        {
                            YazarID = 56,
                            YazarAd = "Murat",
                            YazarSoyad = "Bodur"
                        },
                        new
                        {
                            YazarID = 57,
                            YazarAd = "Tamer",
                            YazarSoyad = "Çelik"
                        },
                        new
                        {
                            YazarID = 58,
                            YazarAd = "Nazlı",
                            YazarSoyad = "Eray"
                        },
                        new
                        {
                            YazarID = 59,
                            YazarAd = "Cengiz",
                            YazarSoyad = "Aytmatov"
                        },
                        new
                        {
                            YazarID = 60,
                            YazarAd = "Tom",
                            YazarSoyad = "Hanks"
                        },
                        new
                        {
                            YazarID = 61,
                            YazarAd = "Alice",
                            YazarSoyad = "Walker"
                        },
                        new
                        {
                            YazarID = 62,
                            YazarAd = "Mikhail",
                            YazarSoyad = "Sholokhov"
                        },
                        new
                        {
                            YazarID = 63,
                            YazarAd = "Tezer",
                            YazarSoyad = "Özlü"
                        },
                        new
                        {
                            YazarID = 64,
                            YazarAd = "Vladimir",
                            YazarSoyad = "Nabokov"
                        },
                        new
                        {
                            YazarID = 65,
                            YazarAd = "Michael",
                            YazarSoyad = "Ende"
                        },
                        new
                        {
                            YazarID = 66,
                            YazarAd = "Svetlana",
                            YazarSoyad = "Aleksieviç"
                        },
                        new
                        {
                            YazarID = 67,
                            YazarAd = "Zülfü",
                            YazarSoyad = "Livaneli"
                        },
                        new
                        {
                            YazarID = 68,
                            YazarAd = "Jack",
                            YazarSoyad = "London"
                        },
                        new
                        {
                            YazarID = 69,
                            YazarAd = "Ahmet",
                            YazarSoyad = "Hakan"
                        },
                        new
                        {
                            YazarID = 70,
                            YazarAd = "John",
                            YazarSoyad = "Keats"
                        },
                        new
                        {
                            YazarID = 71,
                            YazarAd = "Sebastian",
                            YazarSoyad = "Faulks"
                        },
                        new
                        {
                            YazarID = 72,
                            YazarAd = "Maksim",
                            YazarSoyad = "Gorki"
                        },
                        new
                        {
                            YazarID = 73,
                            YazarAd = "Nikolai",
                            YazarSoyad = "Gogol"
                        },
                        new
                        {
                            YazarID = 74,
                            YazarAd = "Rainer",
                            YazarSoyad = "Maria Rilke"
                        },
                        new
                        {
                            YazarID = 75,
                            YazarAd = "Sibel",
                            YazarSoyad = "Yılmaz"
                        },
                        new
                        {
                            YazarID = 76,
                            YazarAd = "Albert",
                            YazarSoyad = "Einstein"
                        },
                        new
                        {
                            YazarID = 77,
                            YazarAd = "Edward",
                            YazarSoyad = "Munch"
                        },
                        new
                        {
                            YazarID = 78,
                            YazarAd = "Marie",
                            YazarSoyad = "Curie"
                        },
                        new
                        {
                            YazarID = 79,
                            YazarAd = "Ziya",
                            YazarSoyad = "Gökalp"
                        },
                        new
                        {
                            YazarID = 80,
                            YazarAd = "Serdar",
                            YazarSoyad = "Yılmaz"
                        },
                        new
                        {
                            YazarID = 81,
                            YazarAd = "Hannah",
                            YazarSoyad = "Arendt"
                        },
                        new
                        {
                            YazarID = 82,
                            YazarAd = "Melih",
                            YazarSoyad = "Cevdet Anday"
                        },
                        new
                        {
                            YazarID = 83,
                            YazarAd = "John",
                            YazarSoyad = "Grisham"
                        },
                        new
                        {
                            YazarID = 84,
                            YazarAd = "Tarkan",
                            YazarSoyad = "Çelik"
                        },
                        new
                        {
                            YazarID = 85,
                            YazarAd = "Yusuf",
                            YazarSoyad = "Has Hacib"
                        },
                        new
                        {
                            YazarID = 86,
                            YazarAd = "Sarah",
                            YazarSoyad = "J. Maas"
                        },
                        new
                        {
                            YazarID = 87,
                            YazarAd = "Hikmet",
                            YazarSoyad = "Kıvılcımlı"
                        },
                        new
                        {
                            YazarID = 88,
                            YazarAd = "Ralph",
                            YazarSoyad = "Ellison"
                        },
                        new
                        {
                            YazarID = 89,
                            YazarAd = "Alice",
                            YazarSoyad = "Munro"
                        },
                        new
                        {
                            YazarID = 90,
                            YazarAd = "Melvin",
                            YazarSoyad = "Buckland"
                        },
                        new
                        {
                            YazarID = 91,
                            YazarAd = "Michel",
                            YazarSoyad = "Foucault"
                        },
                        new
                        {
                            YazarID = 92,
                            YazarAd = "Stefan",
                            YazarSoyad = "Zweig"
                        },
                        new
                        {
                            YazarID = 93,
                            YazarAd = "Thomas",
                            YazarSoyad = "Mann"
                        },
                        new
                        {
                            YazarID = 94,
                            YazarAd = "Maria",
                            YazarSoyad = "Vargas Llosa"
                        },
                        new
                        {
                            YazarID = 95,
                            YazarAd = "Hassan",
                            YazarSoyad = "Fattah"
                        },
                        new
                        {
                            YazarID = 96,
                            YazarAd = "Alice",
                            YazarSoyad = "Sebold"
                        },
                        new
                        {
                            YazarID = 97,
                            YazarAd = "Ted",
                            YazarSoyad = "Hughes"
                        },
                        new
                        {
                            YazarID = 98,
                            YazarAd = "Kurt",
                            YazarSoyad = "Vonnegut"
                        },
                        new
                        {
                            YazarID = 99,
                            YazarAd = "Banu",
                            YazarSoyad = "Bihter"
                        },
                        new
                        {
                            YazarID = 100,
                            YazarAd = "Yılmaz",
                            YazarSoyad = "Özdemir"
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Yorum", b =>
                {
                    b.Property<int>("YorumID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("YorumID"));

                    b.Property<int?>("KitapID")
                        .HasColumnType("int");

                    b.Property<int?>("KullaniciID")
                        .HasColumnType("int");

                    b.Property<string>("YorumMetni")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("YorumTarihi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("YorumID");

                    b.HasIndex("KitapID");

                    b.HasIndex("KullaniciID");

                    b.ToTable("Yorumlar");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("WebApplication1.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("WebApplication1.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("WebApplication1.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("WebApplication1.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("WebApplication1.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Models.Kitap", b =>
                {
                    b.HasOne("WebApplication1.Models.AppUser", "User")
                        .WithMany("Kitaplar")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WebApplication1.Models.Kategori", "Kategori")
                        .WithMany("Kitaplar")
                        .HasForeignKey("KategoriID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Yazar", "Yazar")
                        .WithMany("Kitap")
                        .HasForeignKey("YazarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategori");

                    b.Navigation("User");

                    b.Navigation("Yazar");
                });

            modelBuilder.Entity("WebApplication1.Models.KitapYayinevi", b =>
                {
                    b.HasOne("WebApplication1.Models.Kitap", "Kitap")
                        .WithMany("KitaplarYayinevleri")
                        .HasForeignKey("KitapID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Yayinevi", "Yayinevi")
                        .WithMany("KitaplarYayinevleri")
                        .HasForeignKey("YayineviID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Kitap");

                    b.Navigation("Yayinevi");
                });

            modelBuilder.Entity("WebApplication1.Models.Yorum", b =>
                {
                    b.HasOne("WebApplication1.Models.Kitap", "Kitap")
                        .WithMany("Yorumlar")
                        .HasForeignKey("KitapID");

                    b.HasOne("WebApplication1.Models.AppUser", "Kullanici")
                        .WithMany("Yorumlar")
                        .HasForeignKey("KullaniciID");

                    b.Navigation("Kitap");

                    b.Navigation("Kullanici");
                });

            modelBuilder.Entity("WebApplication1.Models.AppUser", b =>
                {
                    b.Navigation("Kitaplar");

                    b.Navigation("Yorumlar");
                });

            modelBuilder.Entity("WebApplication1.Models.Kategori", b =>
                {
                    b.Navigation("Kitaplar");
                });

            modelBuilder.Entity("WebApplication1.Models.Kitap", b =>
                {
                    b.Navigation("KitaplarYayinevleri");

                    b.Navigation("Yorumlar");
                });

            modelBuilder.Entity("WebApplication1.Models.Yayinevi", b =>
                {
                    b.Navigation("KitaplarYayinevleri");
                });

            modelBuilder.Entity("WebApplication1.Models.Yazar", b =>
                {
                    b.Navigation("Kitap");
                });
#pragma warning restore 612, 618
        }
    }
}
